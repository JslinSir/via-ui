import{runAnimotionFrame,clearAnimotion}from"../utils/animate";import*as frameConfig from"../utils/animateConfig";let _directionFrame="bottomFrame";Component({properties:{maskClose:{type:Boolean,value:!0},hasMask:{type:Boolean,value:!0},direction:{type:String,value:"bottom"},zIndex:{type:Number,value:10}},observers:{direction(t){if(t){const i=`${t}Frame`;if(!(i in frameConfig))throw new Error("direction must be  bottom top center,left right");_directionFrame=i}}},data:{status:!1,style:"bottom:0"},attached(){this._lock=!1},methods:{show(){this._lock||this.setData({status:!0},(()=>{this._popShow(),setTimeout((()=>{this._maskShow()}))}))},async hide(){this._popHide()},handleClose(){this.properties.maskClose&&this.hide()},async _maskShow(){await runAnimotionFrame(this,"#popMask",frameConfig.maskFrame.show),await clearAnimotion(this,"#popMask",{opacity:!1})},async _maskHide(){try{await runAnimotionFrame(this,"#popMask",frameConfig.maskFrame.hide,40),await clearAnimotion(this,"#popCotent",{translateY:!0}),await clearAnimotion(this,"#popMask",{opacity:!0}),this.setData({status:!1}),this._lock=!1}catch(t){this.setData({status:!1}),this._lock=!1}},async _popShow(){await runAnimotionFrame(this,"#popCotent",frameConfig[_directionFrame].show),await clearAnimotion(this,"#popCotent",{translateY:!0,opacity:!1}),this._lock=!0},async _popHide(){try{await runAnimotionFrame(this,"#popCotent",frameConfig[_directionFrame].hide),await clearAnimotion(this,"#popCotent",{translateY:!1,opacity:!0}),this._maskHide()}catch(t){this._maskHide()}},fobidCotentClick(){}}});